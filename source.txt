package core

import (
	"database/sql"
	"encoding/json"
	"flag"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	g "github.com/gosnmp/gosnmp"
	"io/ioutil"
	"log"
	"net"
	"os"
	"os/exec"
	"path/filepath"
	"snmpTrapReceive/global"
	"strings"
	"time"
)

type DBConfig struct {
	User     string `json:"user"`
	Password string `json:"password"`
	Host     string `json:"host"`
	Port     string `json:"port"`
	DBName   string `json:"dbname"`
}

func Run() {
	flag.Usage = func() {
		fmt.Printf("Usage:\n")
		fmt.Printf("   %s\n", filepath.Base(os.Args[0]))
		flag.PrintDefaults()
	}

	tl := g.NewTrapListener()
	tl.OnNewTrap = myTrapHandler
	tl.Params = &g.GoSNMP{
		Version:       g.Version3,
		Timeout:       time.Duration(30) * time.Second,
		SecurityModel: g.UserSecurityModel,
		MsgFlags:      g.AuthPriv,
		//Logger:        g.NewLogger(log.New(os.Stdout, "", 0)),
		SecurityParameters: &g.UsmSecurityParameters{
			UserName: "user",
			//AuthoritativeEngineID:    "1234",
			AuthenticationProtocol:   g.SHA512,
			AuthenticationPassphrase: "password",
			PrivacyProtocol:          g.AES256C,
			PrivacyPassphrase:        "password",
		},
	}
	snmps := getSNMPs()

	err := tl.ListenNew(global.G_Config.Listen, snmps)
	if err != nil {
		log.Panicf("error in listen: %s", err)
	}
}

func getSNMPs() []g.GoSNMP {
	snmps := make([]g.GoSNMP, 0)
	for _, SNMPParameter := range global.G_Config.SNMPParameters {
		snmp := &g.GoSNMP{
			Version:       g.Version3,
			Timeout:       time.Duration(30) * time.Second,
			SecurityModel: g.UserSecurityModel,
			MsgFlags:      g.AuthPriv,
			SecurityParameters: &g.UsmSecurityParameters{
				UserName:                 SNMPParameter.UserName,
				AuthenticationProtocol:   getAuthProtocol(SNMPParameter.AuthenticationProtocol),
				AuthenticationPassphrase: SNMPParameter.AuthenticationPassphrase,
				PrivacyProtocol:          getPrivProtocol(SNMPParameter.PrivacyProtocol),
				PrivacyPassphrase:        SNMPParameter.PrivacyPassphrase,
			},
		}

		snmps = append(snmps, *snmp)
	}
	return snmps
}

func myTrapHandler(packet *g.SnmpPacket, addr *net.UDPAddr) {
	log.Printf("got trapdata from %s\n", addr.IP)
	log.Printf("SNMP trap received from: %s:%d. Community:%s, SnmpVersion:%s\n",
		addr.IP, addr.Port, packet.Community, packet.Version)

	//receivedHost := addr.IP.String()

	var oidV2, valV2, VirtualOidV2 = "", "", ""
	for i, variable := range packet.Variables {
		var val string
		switch variable.Type {
		case g.OctetString:
			val = string(variable.Value.([]byte))
		case g.ObjectIdentifier:
			val = fmt.Sprintf("%s", variable.Value)
			oidV2 = val
		case g.TimeTicks:
			a := g.ToBigInt(variable.Value)
			timeObj := time.Unix((*a).Int64(), 0)
			da := timeObj.Format("2006-01-02 15:04:05")
			val = fmt.Sprintf("%s", da)
		case g.Null:
			val = ""
		default:
			// ... or often you're just interested in numeric values.
			// ToBigInt() will return the Value as a BigInt, for plugging
			// into your calculations.
			a := g.ToBigInt(variable.Value)
			val = fmt.Sprintf("%d", (*a).Int64())
		}
		if val == "" {
			valV2 = valV2 + "null" + " "
		} else {
			valV2 = valV2 + val + " "
		}
		if i == 0 {
			VirtualOidV2 = variable.Name
		}

		log.Printf("- oid[%d]: %s (%s) = %v \n", i, variable.Name, variable.Type, val)
	}
	if oidV2 == "" {
		oidV2 = VirtualOidV2
	}

	if len(valV2) > 0 {
		valV2 = valV2[:len(valV2)-1]
	}

	//增加实际转发设备的ip信息到trap头部
	result_val := fmt.Sprintf("%s %s", addr.IP.String(), valV2)
	log.Printf("- v2Send: %s  = %v \n", oidV2, result_val)

	// go sendV2Plus([]g.SnmpPDU{g.SnmpPDU{
	// 	Value: valV2,
	// 	Name:  oidV2,
	// 	Type:  g.OctetString,
	// }})
	//将解析的内容最后一条发送到syslog服务器，打印发送信息
	//go sendMes(result_val, global.G_Config.V2IP, strconv.Itoa(int(global.G_Config.V2Port)))
	//log.Printf("Send Message Success : %s", result_val)

	ip, labels, level, device_oid := processMessage(result_val)
	log.Printf(ip, labels, level, device_oid)
	dbconfig, err := readDBConfig("db.json")
	if err != nil {
		log.Fatalf("Error reading DB Config: %v", err)
		return
	}
	//log.Printf("connecto mysql")
	db, err := connectToClickhouse(dbconfig)
	if err != nil {
		log.Printf("Error connecting to the database:%v", err)
		return
	}
	defer db.Close()
	//log.Printf("inser data")
	if err := insertTrapData(db, ip, labels, level, device_oid); err != nil {
		log.Printf("Error inserting data into Clickhouse:%v", err)
	}
}

func getAuthProtocol(protocol string) g.SnmpV3AuthProtocol {
	switch protocol {
	case "NoAuth":
		return g.NoAuth
	case "MD5":
		return g.MD5
	case "SHA":
		return g.SHA
	case "SHA224":
		return g.SHA224
	case "SHA256":
		return g.SHA256
	case "SHA384":
		return g.SHA384
	case "SHA512":
		return g.SHA512
	}
	return g.NoAuth
}

func getPrivProtocol(protocol string) g.SnmpV3PrivProtocol {
	switch protocol {
	case "NoPriv":
		return g.NoPriv
	case "DES":
		return g.DES
	case "AES":
		return g.AES
	case "AES192":
		return g.AES192
	case "AES256":
		return g.AES256
	case "AES192C":
		return g.AES192C
	case "AES256C":
		return g.AES256C
	}
	return g.NoPriv
}

//func sendV2Plus(pdus []g.SnmpPDU) {
//	g.Default.Target = global.G_Config.V2IP
//	g.Default.Port = global.G_Config.V2Port
//	g.Default.Version = g.Version2c
//	g.Default.Community = "public"
//	g.Default.Logger = g.NewLogger(log.New(os.Stdout, "", 0))
//	err := g.Default.Connect()
//	if err != nil {
//		log.Fatalf("Connect() err: %v", err)
//	}
//	defer g.Default.Conn.Close()
//
//	trap := g.SnmpTrap{
//		Variables: pdus,
//	}
//
//	_, err = g.Default.SendTrap(trap)
//	if err != nil {
//		log.Fatalf("SendTrap() err: %v", err)
//	}
//	log.Println("sendV2Plus success")
//}

//func sendMes(message string, syslogip string, syslogport string) error {
//	//priority := 13
//	//timestamp := time.Now().Format("2006-01-02 15:04:05")
//	//msg := fmt.Sprintf("<%d>%s traplog: %s", priority, timestamp, message)
//	msg := fmt.Sprintf("%s", message)
//	serverAddr := fmt.Sprintf("%s:%s", syslogip, syslogport)
//	conn, err := net.Dial("udp", serverAddr)
//	if err != nil {
//		return err
//	}
//	defer conn.Close()
//	_, err = conn.Write([]byte(msg))
//	if err != nil {
//		return err
//	}
//	return nil
//}

// 读取数据库配置
func readDBConfig(dbfilename string) (*DBConfig, error) {
	file, err := ioutil.ReadFile(dbfilename)
	if err != nil {
		return nil, fmt.Errorf("could not read file: %v", err)
	}
	var config DBConfig
	err = json.Unmarshal(file, &config)
	if err != nil {
		return nil, fmt.Errorf("could not parse json: %v", err)
	}
	return &config, nil
}

func connectToClickhouse(config *DBConfig) (*sql.DB, error) {
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s",
		config.User, config.Password, config.Host, config.Port, config.DBName)
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		return nil, fmt.Errorf("could not connect to clickhouse:%v", err)
	}
	return db, nil
}

// 插入数据库
func insertTrapData(db *sql.DB, ip, message, level, device_oid string) error {
	query := `INSERT INTO hcs_alert.trap_log (trap_ip,level,labels,device_oid) VALUES (?,?,?,?)`
	_, err := db.Exec(query, ip, level, message, device_oid)
	log.Printf("插入数据库内容trap_ip:%s,level:%s,labels:%s", ip, level, message, device_oid)
	if err != nil {
		return fmt.Errorf("could not insert data into Clickhouse:%v", err)
	}
	return nil
}

// 调用shell解析message
func getLevelFromMessage(ip, message string) (string, string) {
	cmd := exec.Command("./logic.sh", ip, message)
	output, err := cmd.Output()
	if err != nil {
		log.Fatalf("Output error:%v", err)
		return "0", ""
	}
	var level string
	var nMessage string
	_, err = fmt.Sscanf(string(output), "%s %s", &level, &nMessage)
	if err != nil {
		log.Fatalf("level err:%v", err)
	}
	nMessage = strings.Join(strings.Fields(string(output))[1:], " ")
	return level, nMessage
}

func processMessage(message string) (string, string, string, string) {
	parts := strings.Fields(message)
	if len(parts) < 1 {
		log.Printf("invalid data format")
		return "", "", "0", ""
	}
	ip := parts[0]
	device_oid := parts[3]
	new_message := strings.Join(parts[1:], " ")
	level, newMessage := getLevelFromMessage(ip, new_message)
	log.Printf("解析后内容为ip: %s,level：%s,message:%s", ip, level, newMessage)
	return ip, newMessage, level, device_oid
}
